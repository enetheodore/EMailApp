// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.fsck.k9.backend.jmap

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class JmapUploadResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<JmapUploadResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("accountId", "blobId", "type",
      "size")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "accountId")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "size")

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("JmapUploadResponse").append(')') }

  public override fun fromJson(reader: JsonReader): JmapUploadResponse {
    var accountId: String? = null
    var blobId: String? = null
    var type: String? = null
    var size: Long? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> accountId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("accountId",
            "accountId", reader)
        1 -> blobId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("blobId",
            "blobId", reader)
        2 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        3 -> size = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("size", "size",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return JmapUploadResponse(
        accountId = accountId ?: throw Util.missingProperty("accountId", "accountId", reader),
        blobId = blobId ?: throw Util.missingProperty("blobId", "blobId", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader),
        size = size ?: throw Util.missingProperty("size", "size", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: JmapUploadResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("accountId")
    stringAdapter.toJson(writer, value_.accountId)
    writer.name("blobId")
    stringAdapter.toJson(writer, value_.blobId)
    writer.name("type")
    stringAdapter.toJson(writer, value_.type)
    writer.name("size")
    longAdapter.toJson(writer, value_.size)
    writer.endObject()
  }
}
